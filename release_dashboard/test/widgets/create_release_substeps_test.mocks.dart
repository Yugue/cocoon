// Mocks generated by Mockito 5.0.16 from annotations
// in conductor_ui/test/widgets/create_release_substeps_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:conductor_core/conductor_core.dart' as _i7;
import 'package:conductor_core/src/git.dart' as _i4;
import 'package:conductor_core/src/repository.dart' as _i2;
import 'package:conductor_core/src/stdio.dart' as _i6;
import 'package:file/file.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:process/process.dart' as _i5;

import 'create_release_substeps_test.dart' as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCheckouts_0 extends _i1.Fake implements _i2.Checkouts {}

class _FakeDirectory_1 extends _i1.Fake implements _i3.Directory {}

class _FakeGit_2 extends _i1.Fake implements _i4.Git {}

class _FakeProcessManager_3 extends _i1.Fake implements _i5.ProcessManager {}

class _FakeFile_4 extends _i1.Fake implements _i3.File {}

class _FakeStdio_5 extends _i1.Fake implements _i6.Stdio {}

/// A class which mocks [StartContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartContext extends _i1.Mock implements _i7.StartContext {
  MockStartContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get candidateBranch =>
      (super.noSuchMethod(Invocation.getter(#candidateBranch), returnValue: '')
          as String);
  @override
  _i2.Checkouts get checkouts =>
      (super.noSuchMethod(Invocation.getter(#checkouts),
          returnValue: _FakeCheckouts_0()) as _i2.Checkouts);
  @override
  List<String> get engineCherrypickRevisions =>
      (super.noSuchMethod(Invocation.getter(#engineCherrypickRevisions),
          returnValue: <String>[]) as List<String>);
  @override
  String get engineMirror =>
      (super.noSuchMethod(Invocation.getter(#engineMirror), returnValue: '')
          as String);
  @override
  String get engineUpstream =>
      (super.noSuchMethod(Invocation.getter(#engineUpstream), returnValue: '')
          as String);
  @override
  List<String> get frameworkCherrypickRevisions =>
      (super.noSuchMethod(Invocation.getter(#frameworkCherrypickRevisions),
          returnValue: <String>[]) as List<String>);
  @override
  String get frameworkMirror =>
      (super.noSuchMethod(Invocation.getter(#frameworkMirror), returnValue: '')
          as String);
  @override
  String get frameworkUpstream => (super
          .noSuchMethod(Invocation.getter(#frameworkUpstream), returnValue: '')
      as String);
  @override
  _i3.Directory get flutterRoot =>
      (super.noSuchMethod(Invocation.getter(#flutterRoot),
          returnValue: _FakeDirectory_1()) as _i3.Directory);
  @override
  String get incrementLetter =>
      (super.noSuchMethod(Invocation.getter(#incrementLetter), returnValue: '')
          as String);
  @override
  _i4.Git get git =>
      (super.noSuchMethod(Invocation.getter(#git), returnValue: _FakeGit_2())
          as _i4.Git);
  @override
  _i5.ProcessManager get processManager =>
      (super.noSuchMethod(Invocation.getter(#processManager),
          returnValue: _FakeProcessManager_3()) as _i5.ProcessManager);
  @override
  String get releaseChannel =>
      (super.noSuchMethod(Invocation.getter(#releaseChannel), returnValue: '')
          as String);
  @override
  _i3.File get stateFile => (super.noSuchMethod(Invocation.getter(#stateFile),
      returnValue: _FakeFile_4()) as _i3.File);
  @override
  _i6.Stdio get stdio => (super.noSuchMethod(Invocation.getter(#stdio),
      returnValue: _FakeStdio_5()) as _i6.Stdio);
  @override
  _i8.Future<String> get conductorVersion =>
      (super.noSuchMethod(Invocation.getter(#conductorVersion),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<void> run() => (super.noSuchMethod(Invocation.method(#run, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FakeNextStep].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeNextStep extends _i1.Mock implements _i9.FakeNextStep {
  MockFakeNextStep() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void nextStep() => super.noSuchMethod(Invocation.method(#nextStep, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
